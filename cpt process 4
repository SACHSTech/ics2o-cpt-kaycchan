""" 
------------------------------------------------------------------------
Name:   main.py

Purpose:    create a program that demonstrates all skills learned in ICS2O1

Author: Chan.K

Created:    14/01/2021
------------------------------------------------------------------------
"""

import pygame
import random

# ------------ Setup pygame ------------- #
# Define some colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 128)
TRANSPARENT = (0, 0, 0, 0)

pygame.init()
pygame.display.init()
pygame.font.init()
pygame.display.set_caption("ICS2O1 CPT")

#Loop until the user clicks the close button.
done = False
 
# Used to manage how fast the screen updates
clock = pygame.time.Clock()


# ------------ Screen Setup ------------- #
# Set the width and height of the screen [width, height]
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))


# ------ Game variables and objects ------ #
background = pygame.image.load("images/background.png").convert_alpha()
question_box = pygame.image.load("images/question_box2.png").convert_alpha()
question_box = pygame.transform.scale(question_box, (760, 200))

# ------------ Classes ------------- #
class Text():
  def __init__(self, text, x, y, font, color, size):
    self.font = pygame.font.SysFont(font, size)
    self.text = self.font.render(text, True, WHITE)
    self.x = x
    self.y = y
  
  def update(self):
    screen.blit(self.text, (self.x, self.y))

class Parts():
  def __init__(self, type, image, x, y, width, height, velocity, points):
    self.type = type
    self.x = x
    self.y = y
    self.width = width
    self.height = height
    self.velocity = velocity
    self.active = True
    self.healthy = True
    self.points = points
    self.image = image
 
  def activate(self):
    self.active = True
  
  def deactivate(self):
    self.active = False
    
  def update(self):
    if not self.active:
      return
    self.image = pygame.transform.scale(self.image, (self.width, self.height))
    screen.blit(self.image, (self.x, self.y))

  def grow(self):
    self.width += 50
    self.height += 50

  def shrink(self):
    self.width -= 50
    self.height -= 50

  def move(self):
    if not self.active:
      return
    if self.x + self.width > SCREEN_WIDTH or self.x < 0:
      self.velocity *= -1
    self.x += self.velocity
  
  # x and y are the coordinates of the mouse
  # Returns true if cow reaches max size
  def is_clicked(self, x, y):
    if not self.active:
      return False
    if x>self.x and x<self.x+self.width and y>self.y and y<self.y+self.height:
      return True
    else:
      return False

# The main game class
class Game():
  def __init__(self):
    self.points = 0
    self.answer = ''
    self.question = None
    self.done = False

    self.images = {
      'gpu': pygame.image.load("images/gpu.png").convert_alpha(),
      'trojan': pygame.image.load("images/trojan.png").convert_alpha(),
      'cpu_cooler': pygame.image.load("images/cpu_cooler.png").convert_alpha(),
      'cpu': pygame.image.load("images/cpu.png").convert_alpha(),
      'backdoor': pygame.image.load("images/backdoor.png").convert_alpha(),
      'hard_drive': pygame.image.load("images/harddrive.png").convert_alpha(),
      'motherboard': pygame.image.load("images/motherboard.png").convert_alpha(),
      'power_supply': pygame.image.load("images/powersupply.png").convert_alpha(),
      'ram': pygame.image.load("images/ram.png").convert_alpha(),
    }

    # Create the moving computer parts
    self.parts = {
      'gpu': Parts('gpu', self.images['gpu'], 100, 300, 100, 100, 1, 3),
      'trojan': Parts('trojan', self.images['trojan'], 100, 270, 70, 54, 3, 8),
      'cpu_cooler': Parts('cpu_cooler', self.images['cpu_cooler'], 30, 460, 150, 100, 1, 2),
      'cpu': Parts('cpu', self.images['cpu'], 700, 540, 70, 60, 1, 3),
      'backdoor': Parts('backdoor', self.images['backdoor'], 600, 500, 130, 150, 4, 4),
      'hard_drive': Parts('hard_drive', self.images['hard_drive'], 460, 300, 80, 80, 5, 10),
      'motherboard': Parts('motherboard', self.images['motherboard'], 380, 390, 100, 64, 2, 5),
      'power_supply': Parts('power_supply', self.images['power_supply'], 380, 390, 100, 64, 3, 4),
      'ram': Parts('ram', self.images['ram'], 20, 390, 100, 64, 3, 5),
      #'textbox': Parts
    }

    # Create questions
    self.texts = {
      'gpu': Text('Which part loads the screen graphics?', 80, 100, 'Times', WHITE, 30),
      'trojan': Text('Which is the most dangerous type of malware?', 80, 100, 'Times', WHITE, 30),
      'cpu_cooler': Text('This is like air conditioning for the brain.', 80, 100, 'Times', WHITE, 30),
      'cpu': Text('Which computer part acts like a brain?', 80, 100, 'Times', WHITE, 30),
      'backdoor': Text('What is similar to trojan viruses?', 80, 100, 'Times', WHITE, 30),
      'hard_drive': Text('What stores digital data?', 80, 100, 'Times', WHITE, 30),
      'motherboard': Text('This is the backbone of the computer.', 80, 100, 'Times', WHITE, 30),
      'power_supply': Text('This part is the mitochondria of the computer.', 80, 100, 'Times', WHITE, 30),
      'ram': Text('Short term storage space?', 80, 100, 'Times', WHITE, 30),
    }

    # show_intro
    self.show_intro()

  # Show intro screen and instructions/welcome
  def show_intro(self):
    self.question = Text('Welcome! Choose the correct answer for each question. (Click to continue)', 30, 100, 'Times', WHITE, 25)
    self.answer = 'transition'
    
  #Code to execute when game is over
  def end_game(self):
    self.question = Text('Good job! You are an ICS2O1 knowledge master.', 35, 100, 'Times', WHITE, 20)
    self.answer = 'game_over'

  # Loop through all images and update them
  def update_screen(self):
    self.question.update()
    for key in self.parts:
      self.parts[key].move()
      self.parts[key].update()

  # Select next question and answer from list of possible parts
  def next_question(self):
    # Choose a new computer part answer
    self.answer = random.choice(list(self.parts.keys()))
    # Display the question text
    self.question = self.texts[self.answer]
  
  # Check which things were clicked
  def handle_click(self, x, y):
    if self.answer == 'transition':
      # check if red box is clicked
      if x > 0 and x < SCREEN_WIDTH and y > 0 and y < 220:
        self.next_question()
    elif self.answer == 'game_over':
      if x > 0 and x < SCREEN_WIDTH and y > 0 and y < 220:
        self.done = True

    else:
      # check if a part was clicked
      if self.parts[self.answer].is_clicked(x, y):
        game.points += 1
        self.question = Text('Good Job!  (click to continue)', 70, 100, 'Times', WHITE, 30)
        self.answer = 'transition'


# Create the main game object
game = Game()

###############################################
# --------------MAIN EVENT LOOP---------------#
###############################################
while not game.done:

  pos = pygame.mouse.get_pos()
  
  # --- Main event loop
  for event in pygame.event.get():
    if event.type == pygame.QUIT:
      done = True
          
    if event.type == pygame.MOUSEBUTTONUP:
      mouse_x = pos[0]
      mouse_y = pos[1]

      # check if any parts were clicked
      game.handle_click(mouse_x, mouse_y)

  # Show background
  screen.blit(background, (0, 0))
  screen.blit(question_box, (20, 20))

  # Update the screen
  game.update_screen()

  # end game
  if game.points == 5:
    game.end_game()

  # --- Go ahead and update the screen with what we've drawn.
  pygame.display.flip()

  # --- Limit to 60 frames per second
  clock.tick(60)

# Close the window and quit.
pygame.quit()
